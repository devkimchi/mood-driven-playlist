@using MoodDrivenPlaylist.WebApp.Clients
@using MoodDrivenPlaylist.WebApp.Models
@inject IApiAppClient Api

<div class="container">
    <h1>Get your playlist based on your moods</h1>

    <div class="row">
        <div class="col col-6">
            <div class="form-group">
                <label for="description">How are you doing today?</label>
                <textarea class="form-control" style="height: 200px;" id="description" @onchange="UpdateDescriptionAsync">@userFeeling</textarea>
            </div>
        </div>
        <div class="col col-6">
            <div class="row">
                <div class="form-group">
                    <label for="summary">Mood Summary</label>
                    <textarea class="form-control" style="height: 100px;" id="summary" readonly>@moodSummary</textarea>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="use-apim" @onchange="UpdateUseApimAsync" checked="@useApim">
                    <label class="form-check-label" for="use-apim">Use APIM</label>
                </div>
                <div class="form-group">
                    <button class="btn btn-primary" id="get-playlist" @onclick="GetPlaylistAsync">Get Playlist</button>
                    <button class="btn btn-secondary" id="clear" @onclick="ClearAsync">Clear</button>
                </div>
            </div>
        </div>
    </div>

    <div class="p-5 mb-4 bg-light rounded-3" style="height: 600px;">
        <iframe id="playlist" title="@playlist.Title" src="@playlist.Src" width="100%" height="100%" style="@playlist.Style" frameborder="0" allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy"></iframe>
    </div>
</div>

@code {
    private string? userFeeling { get; set; } = string.Empty;
    private string? moodSummary { get; set; } = string.Empty;
    private bool? useApim { get; set; } = false;
    private EmbeddedPlayerDetails? playlist = new EmbeddedPlayerDetails();

    protected async Task UpdateDescriptionAsync(ChangeEventArgs e)
    {
        this.userFeeling = e.Value?.ToString();

        await Task.CompletedTask;
    }

    protected async Task UpdateUseApimAsync(ChangeEventArgs e)
    {
        this.useApim = Convert.ToBoolean(e.Value);

        await Task.CompletedTask;
    }

    protected async Task GetPlaylistAsync()
    {
        var mood = await this.Api.GetMoodAsync(this.userFeeling, this.useApim.GetValueOrDefault());

        this.moodSummary = mood.Summary;
        this.playlist = await this.Api.CreatePlaylistAsync(mood.Summary);
    }

    protected async Task ClearAsync()
    {
        this.userFeeling = string.Empty;
        this.moodSummary = string.Empty;
        this.useApim = false;
        this.playlist = new EmbeddedPlayerDetails();
    }
}
